var Window = {
	winWidth:640,
	winHeight:480,
	txtWidth:80,
	txtHeight:25,
	winName:"SGL Demo"
};
var Screen = {
	buffer1:null,
	buffer2:null,
	content:{ width:0, height:0, content:[] },
	changed:{ width:0, height:0, content:[] },
	rgb:new Array(3),
	bfc:0xF<<4
};
var Mouse = {
	pos:{ x:0, y:0 },
	mouseBuf:new Array(1024),
	front:-1, rear:0,
	left:0, middle:0, right:0,
	push:function(num){
		this.front = (this.front+1)%1024;
		this.mouseBuf[this.front] = num;
	},
	pop:function(){
		if(this.front+1==this.rear)return null;
		var ret = this.mouseBuf[this.rear];
		this.rear = (this.rear+1)%1024;
		return ret;
	}
};
var Key = {
	keyBuf:new Array(1024),
	front:-1, rear:0,
	push:function(num){
		this.front = (this.front+1)%1024;
		this.keyBuf[this.front] = num;
	},
	pop:function(){
		if(this.front+1==this.rear)return null;
		var ret = this.keyBuf[this.rear];
		this.rear = (this.rear+1)%1024;
		return ret;
	}
};
var Vector = {
	_v8:function(){},
	_v9:function(){}
};

var letters = [
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x00
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x01
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x02
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x03
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x04
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x05
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x06
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x07
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x08
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x09
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x0A
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x0B
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x0C
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x0D
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x0E
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x0F
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x10
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x11
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x12
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x13
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x14
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x15
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x16
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x17
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x18
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x19
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x1A
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x1B
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x1C
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x1D
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x1E
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x1F
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//Space
	[ 0x00, 0x18, 0x3C, 0x3C, 0x3C, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00 ],//!
	[ 0x00, 0x63, 0x63, 0x63, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ], // "
	[ 0x00, 0x00, 0x00, 0x36, 0x36, 0x7F, 0x36, 0x36, 0x36, 0x7F, 0x36, 0x36, 0x00 ], // #
	[ 0x0C, 0x0C, 0x3E, 0x63, 0x61, 0x60, 0x3E, 0x03, 0x03, 0x43, 0x63, 0x3E, 0x0C ], // $
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x63, 0x06, 0x0C, 0x18, 0x33, 0x63, 0x00 ], // %
	[ 0x00, 0x00, 0x00, 0x1C, 0x36, 0x36, 0x1C, 0x3B, 0x6E, 0x66, 0x66, 0x3B, 0x00 ], // &
	[ 0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ], // '
	[ 0x00, 0x00, 0x0C, 0x18, 0x18, 0x30, 0x30, 0x30, 0x30, 0x18, 0x18, 0x0C, 0x00 ], // (
	[ 0x00, 0x00, 0x18, 0x0C, 0x0C, 0x06, 0x06, 0x06, 0x06, 0x0C, 0x0C, 0x18, 0x00 ], // )
	[ 0x00, 0x00, 0x00, 0x00, 0x42, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x42, 0x00, 0x00 ], // *
	[ 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0xFF, 0x18, 0x18, 0x18, 0x00, 0x00 ], // +
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30 ], // ,
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00 ], // -
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00 ], // .
	[ 0x00, 0x00, 0x01, 0x03, 0x07, 0x0E, 0x1C, 0x38, 0x70, 0xE0, 0xC0, 0x80, 0x00 ], // / 
	[ 0x00, 0x00, 0x3E, 0x63, 0x63, 0x63, 0x6B, 0x6B, 0x63, 0x63, 0x63, 0x3E, 0x00 ],//0 
	[ 0x00, 0x00, 0x0C, 0x1C, 0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00 ],//1
	[ 0x00, 0x00, 0x3E, 0x63, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x61, 0x63, 0x7F, 0x00 ],//2
	[ 0x00, 0x00, 0x3E, 0x63, 0x03, 0x03, 0x1E, 0x03, 0x03, 0x03, 0x63, 0x3E, 0x00 ],//3
	[ 0x00, 0x00, 0x06, 0x0E, 0x1E, 0x36, 0x66, 0x66, 0x7F, 0x06, 0x06, 0x0F, 0x00 ],//4
	[ 0x00, 0x00, 0x7F, 0x60, 0x60, 0x60, 0x7E, 0x03, 0x03, 0x63, 0x73, 0x3E, 0x00 ],//5
	[ 0x00, 0x00, 0x1C, 0x30, 0x60, 0x60, 0x7E, 0x63, 0x63, 0x63, 0x63, 0x3E, 0x00 ],//6
	[ 0x00, 0x00, 0x7F, 0x63, 0x03, 0x06, 0x06, 0x0C, 0x0C, 0x18, 0x18, 0x18, 0x00 ],//7
	[ 0x00, 0x00, 0x3E, 0x63, 0x63, 0x63, 0x3E, 0x63, 0x63, 0x63, 0x63, 0x3E, 0x00 ],//8
	[ 0x00, 0x00, 0x3E, 0x63, 0x63, 0x63, 0x63, 0x3F, 0x03, 0x03, 0x06, 0x3C, 0x00 ],//9
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00 ], // :
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30 ], // ;
	[ 0x00, 0x00, 0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x00 ], // <
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00 ], // =
	[ 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00 ], // >
	[ 0x00, 0x00, 0x3E, 0x63, 0x63, 0x06, 0x0C, 0x0C, 0x0C, 0x00, 0x0C, 0x0C, 0x00 ], // ?
	[ 0x00, 0x00, 0x3E, 0x63, 0x63, 0x6F, 0x6B, 0x6B, 0x6E, 0x60, 0x60, 0x3E, 0x00 ], // @
	[ 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0xc3, 0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00 ],//A
	[ 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe, 0x00, 0x00 ],//B
	[ 0x7e, 0xe7, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe7, 0x7e, 0x00, 0x00 ],//C
	[ 0xfc, 0xce, 0xc7, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc7, 0xce, 0xfc, 0x00, 0x00 ],//D
	[ 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xfc, 0xc0, 0xc0, 0xc0, 0xc0, 0xff, 0x00, 0x00 ],//E
	[ 0xff, 0xc0, 0xc0, 0xc0, 0xfc, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00 ],//F
	[ 0x7e, 0xe7, 0xc0, 0xc0, 0xc0, 0xc0, 0xcf, 0xc3, 0xc3, 0xe7, 0x7e, 0x00, 0x00 ],//G
	[ 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00 ],//H
	[ 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00 ],//I
	[ 0x7c, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0xee, 0x7c, 0x00, 0x00 ],//J
	[ 0xc3, 0xc6, 0xcc, 0xd8, 0xf0, 0xe0, 0xf0, 0xd8, 0xcc, 0xc6, 0xc3, 0x00, 0x00 ],//K
	[ 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xff, 0x00, 0x00 ],//L
	[ 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00 ],//M
	[ 0xe3, 0xe3, 0xf3, 0xf3, 0xfb, 0xdb, 0xdf, 0xcf, 0xcf, 0xc7, 0xc7, 0x00, 0x00 ],//N
	[ 0x7e, 0xe7, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xe7, 0x7e, 0x00, 0x00 ],//O
	[ 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00 ],//P
	[ 0x3c, 0x66, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdf, 0x6e, 0x3f, 0x00, 0x00 ],//Q
	[ 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe, 0xf0, 0xd8, 0xcc, 0xc6, 0xc3, 0x00, 0x00 ],//R
	[ 0x7e, 0xe7, 0xc0, 0xc0, 0xe0, 0x7e, 0x07, 0x03, 0x03, 0xe7, 0x7e, 0x00, 0x00 ],//S
	[ 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00 ],//T
	[ 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xe7, 0x7e, 0x00, 0x00 ],//U
	[ 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x3c, 0x3c, 0x18, 0x00, 0x00 ],//V
	[ 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0xff, 0xe7, 0xc3, 0x00, 0x00 ],//W
	[ 0xc3, 0x66, 0x66, 0x3c, 0x3c, 0x18, 0x3c, 0x3c, 0x66, 0x66, 0xc3, 0x00, 0x00 ],//X
	[ 0xc3, 0x66, 0x66, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00 ],//Y
	[ 0xff, 0x03, 0x03, 0x06, 0x0c, 0x7e, 0x30, 0x60, 0xc0, 0xc0, 0xff, 0x00, 0x00 ],//Z
	[ 0x00, 0x00, 0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00 ], // [
	[ 0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x38, 0x1C, 0x0E, 0x07, 0x03, 0x01, 0x00 ], // \'
	[ 0x00, 0x00, 0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00 ], // ]
	[ 0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ], // ^
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF ], // _
	[ 0x18, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ], // `
	[ 0x00, 0x00, 0x00, 0x00, 0x3C, 0x46, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00, 0x00 ], // a
	[ 0x00, 0x70, 0x30, 0x30, 0x3C, 0x36, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00, 0x00 ], // b
	[ 0x00, 0x00, 0x00, 0x00, 0x3E, 0x63, 0x60, 0x60, 0x60, 0x63, 0x3E, 0x00, 0x00 ], // c
	[ 0x00, 0x0E, 0x06, 0x06, 0x1E, 0x36, 0x66, 0x66, 0x66, 0x66, 0x3B, 0x00, 0x00 ], // d
	[ 0x00, 0x00, 0x00, 0x00, 0x3E, 0x63, 0x63, 0x7E, 0x60, 0x63, 0x3E, 0x00, 0x00 ], // e
	[ 0x00, 0x1C, 0x36, 0x32, 0x30, 0x7C, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00, 0x00 ], // f
	[ 0x00, 0x00, 0x00, 0x00, 0x3B, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x06, 0x66, 0x3C ], // g
	[ 0x00, 0x70, 0x30, 0x30, 0x36, 0x3B, 0x33, 0x33, 0x33, 0x33, 0x73, 0x00, 0x00 ], // h
	[ 0x00, 0x0C, 0x0C, 0x00, 0x1C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00, 0x00 ], // i
	[ 0x00, 0x06, 0x06, 0x00, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3C ], // j
	[ 0x00, 0x70, 0x30, 0x30, 0x33, 0x33, 0x36, 0x3C, 0x36, 0x33, 0x73, 0x00, 0x00 ], // k
	[ 0x00, 0x1C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00, 0x00 ], // l
	[ 0x00, 0x00, 0x00, 0x00, 0x6E, 0x7F, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x00, 0x00 ], // m
	[ 0x00, 0x00, 0x00, 0x00, 0x6E, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x00, 0x00 ], // n
	[ 0x00, 0x00, 0x00, 0x00, 0x3E, 0x63, 0x63, 0x63, 0x63, 0x63, 0x3E, 0x00, 0x00 ], // o
	[ 0x00, 0x00, 0x00, 0x00, 0x6E, 0x33, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x30, 0x78 ], // p
	[ 0x00, 0x00, 0x00, 0x00, 0x3B, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F ], // q
	[ 0x00, 0x00, 0x00, 0x00, 0x6E, 0x3B, 0x33, 0x30, 0x30, 0x30, 0x78, 0x00, 0x00 ], // r
	[ 0x00, 0x00, 0x00, 0x00, 0x3E, 0x63, 0x38, 0x0E, 0x03, 0x63, 0x3E, 0x00, 0x00 ], // s
	[ 0x00, 0x08, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x1B, 0x0E, 0x00, 0x00 ], // t
	[ 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3B, 0x00, 0x00 ], // u
	[ 0x00, 0x00, 0x00, 0x00, 0x63, 0x63, 0x36, 0x36, 0x1C, 0x1C, 0x08, 0x00, 0x00 ], // v
	[ 0x00, 0x00, 0x00, 0x00, 0x63, 0x63, 0x63, 0x6B, 0x6B, 0x7F, 0x36, 0x00, 0x00 ], // w
	[ 0x00, 0x00, 0x00, 0x00, 0x63, 0x36, 0x1C, 0x1C, 0x1C, 0x36, 0x63, 0x00, 0x00 ], // x
	[ 0x00, 0x00, 0x00, 0x00, 0x63, 0x63, 0x63, 0x63, 0x63, 0x3F, 0x03, 0x06, 0x3C ], // y
	[ 0x00, 0x00, 0x00, 0x00, 0x7F, 0x66, 0x0C, 0x18, 0x30, 0x63, 0x7F, 0x00, 0x00 ], // z
	[ 0x00, 0x00, 0x0E, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0E, 0x00 ], // [
	[ 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18 ], // |
	[ 0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0E, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00 ], // ]
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3B, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//~
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x7F
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x80
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x81
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x82
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x83
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x84
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x85
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x86
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x87
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x88
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x89
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x8A
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x8B
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x8C
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x8D
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x8E
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x8F
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x90
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x91
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x92
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x93
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x94
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x95
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x96
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x97
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x98
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x99
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x9A
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x9B
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x9C
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x9D
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x9E
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0x9F
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xA0
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xA1
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xA2
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xA3
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xA4
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xA5
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xA6
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xA7
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xA8
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xA9
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xAA
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xAB
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xAC
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xAD
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xAE
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xAF
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xB0
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xB1
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xB2
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xB3
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xB4
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xB5
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xB6
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xB7
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xB8
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xB9
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xBA
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xBB
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xBC
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xBD
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xBE
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xBF
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xC0
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xC1
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xC2
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xC3
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xC4
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xC5
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xC6
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xC7
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xC8
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xC9
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xCA
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xCB
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xCC
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xCD
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xCE
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xCF
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xD0
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xD1
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xD2
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xD3
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xD4
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xD5
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xD6
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xD7
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xD8
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xD9
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xDA
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xDB
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xDC
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xDD
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xDE
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xDF
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xE0
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xE1
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xE2
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xE3
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xE4
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xE5
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xE6
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xE7
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xE8
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xE9
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xEA
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xEB
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xEC
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xED
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xEE
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xEF
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xF0
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xF1
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xF2
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xF3
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xF4
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xF5
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xF6
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xF7
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xF8
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xF9
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xFA
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xFB
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xFC
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xFD
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],//0xFE
	[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]//0xFF
];

var _sglMode = 0, _innerFunc = 0;
var _delaySE = 0, _inDelay = 0;
var _delayBegin = 0, _delayEnd = 0, _vectDelta = 50;
var _vectKey = 0;
var _enMouse = 0, _enKey = 0;
var _activePage = 0, _visualPage = 0;
var _inLoop = 0, _full = 0;

//Inner functions.
function makeFont() {
	var tmp;
	for (var i = 0; i < 256; i++) {
		tmp = letters[i][0];
		letters[i][0] = letters[i][12];
		letters[i][12] = tmp;
		tmp = letters[i][1];
		letters[i][1] = letters[i][11];
		letters[i][11] = tmp;
		tmp = letters[i][2];
		letters[i][2] = letters[i][10];
		letters[i][10] = tmp;
		tmp = letters[i][3];
		letters[i][3] = letters[i][9];
		letters[i][9] = tmp;
		tmp = letters[i][4];
		letters[i][4] = letters[i][8];
		letters[i][8] = tmp;
		tmp = letters[i][5];
		letters[i][5] = letters[i][7];
		letters[i][7] = tmp;
	}
}

//System functions.
function fullSize(){
	var winWidth, winHeight;
	if (window.innerWidth) 
	winWidth = window.innerWidth; 
	else if ((document.body) && (document.body.clientWidth)) 
	winWidth = document.body.clientWidth; 
	if (window.innerHeight) 
	winHeight = window.innerHeight; 
	else if ((document.body) && (document.body.clientHeight)) 
	winHeight = document.body.clientHeight;
	return { x:winWidth, y:winHeight };
}
function initWindow(width, height, title, mode){
	Window.winName = title;
	if(mode==0){
		Window.winWidth = width;
		Window.winHeight = height;
	}
	else if(mode==1){
		Window.txtWidth = width;
		Window.txtHeight = height;
		Window.winWidth = width*8;
		Window.winHeight = height*16;
	}
}
function initMouse(mode){
	Mouse.front = -1;
	Mouse.rear = 0;
	_enMouse = 1;
}
function mouseStatus(b) {
	switch (b) {
	case 1:
		return Mouse.left;
	case 2:
		return Mouse.right;
	case 4:
		return Mouse.middle;
	default:
		return 0;
	}
}
function mousePos() {
	var ret = {};

	ret.x = Mouse.pos.x;
	ret.y = Mouse.pos.y;
	return ret;
}
function biosMouse(cmd) {
	var ret = {
		x:0,
		y:0,
		m:0
	};

	if (cmd == 1) {
		ret.m = (Mouse.front + 1) % 1024 != Mouse.rear;
		return ret;
	}
	if (cmd != 0) {
		ret.m = 0;
		return ret;
	}

	ret = Mouse.pop();
	return ret;
}
function clearMouseBuffer() {
	Mouse.rear = (Mouse.front + 1) % 1024;
	return 0;
}
function initKey() {
	Key.front = -1;
	Key.rear = 0;
	_enKey = 1;
}
function biosKey(cmd) {
	var ret;

	if (cmd == 1)return (Key.front + 1) % 1024 != Key.rear;
	if (cmd != 0)return 0;

	ret = Key.pop();

	return ret;
}
function clearKeyBuffer() {
	Key.rear = (Key.front + 1) % 1024;
	return 0;
}
function delay(t) {
	var st, en;

	_inDelay = 1;
	st = new Date().getTime();
	en = new Date().getTime();
	while (en - st < t) {
		en = new Date().getTime();
	}
	_inDelay = 0;
}
function delayBegin() {
	_delayBegin = new Date().getTime();
	_delaySE = 1;
}
function delayEnd(t) {
	if (!_delaySE)return 0;

	_inDelay = 1;

	_delayEnd = new Date().getTime();
	while (_delayEnd - _delayBegin < t) {
		_delayEnd = new Date().getTime();
	}
	_delaySE = 0;
	_inDelay = 0;

	return 1;
}
function getVect(intn) {
	if (intn == 8)return Vector._v8;
	if (intn == 9)return Vector._v9;

	return null;
}
function setVect(intn, v) {
	if (intn == 8) {
		Vector._v8 = v;
		return 1;
	}
	if (intn == 9) {
		Vector._v9 = v;
		return 1;
	}

	return 0;
}
function dosInt(intn, ret) {
	if (intn == 9)
		ret = _vectKey;
}
function random(n) {
	var rand = Math.random();   
	return rand * n;   
} 
function setFreq(f) {
	_vectDelta = 1000 / f;
	return 0;
}
function setActivePage(page) {
	if (page != 0 && page != 1)return;
	_activePage = page;
}
function setVisualPage(page) {
	if (page != 0 && page != 1)return;
	_visualPage = page;
}

//Bitmap functions.
function setColor(r, g, b) {
	if (_sglMode != 0 && !_innerFunc)return;

	Screen.rgb[0] = r % 256;
	Screen.rgb[1] = g % 256;
	Screen.rgb[2] = b % 256;
}
function clearScreen() {
	var buf;

	if (_sglMode != 0 && !_innerFunc)return;

	if (_activePage == 0) buf = Screen.buffer1;
	else buf = Screen.buffer2;

	for (var i = 0; i < buf.data.length; i += 4) {
		buf.data[i] = Screen.rgb[0];
		buf.data[i + 1] = Screen.rgb[1];
		buf.data[i + 2] = Screen.rgb[2];
		buf.data[i + 3] = 255;
	}
}
function putPixel(x, y) {
	var buf, p;

	if (_sglMode != 0 && !_innerFunc)return -1;

	if (_activePage == 0) buf = Screen.buffer1;
	else buf = Screen.buffer2;

	if (x < 0 || x >= buf.width || y < 0 || y >= buf.height)return -1;

	p = (y * buf.width + x) * 4;
	buf.data[p] = Screen.rgb[0];
	buf.data[p + 1] = Screen.rgb[1];
	buf.data[p + 2] = Screen.rgb[2];
	buf.data[p + 3] = 255;

	return 0;
}
function getPixel(x, y) {
	var im, ret;
	var buf, p;

	if (_sglMode != 0 && !_innerFunc) {
		return -1;
	}

	if (_activePage == 0) buf = Screen.buffer1;
	else buf = Screen.buffer2;

	ret.r = ret.g = ret.b = null;

	if (x < 0 || x >= buf.width || y < 0 || y >= buf.height)return ret;
	p = (y * buf.width + x) * 4;
	ret.r = buf.data[p++];
	ret.g = buf.data[p++];
	ret.b = buf.data[p++];

	return ret;
}
function putQuad(x1, y1, x2, y2, mode) {
	var i, j;

	if (_sglMode != 0 && !_innerFunc)return null;

	if (mode == 0)
		for (i = x1; i <= x2; i++)
			for (j = y1; j <= y2; j++)
				putPixel(i, j);

	if (mode == 1) {
		for (i = x1; i <= x2; i++) {
			putPixel(i, y1);
			putPixel(i, y2);
		}
		for (j = y1; j <= y2; j++) {
			putPixel(x1, j);
			putPixel(x2, j);
		}
	}
}
function putString(str, x, y) {
	var len, i, j, k;

	if (_sglMode != 0 && !_innerFunc)return;

	len = str.length;
	for (i = 0; i < len; i++)
		for (j = 0; j < 13; j++)
			for (k = 7; k >= 0; k--)
				if (letters[str[i].charCodeAt()][j] & (1<<k))
					putPixel(x + i * 10 + 7 - k, y + 16 - j)
}
function putChar(ch, x, y) {
	var i, j, k;

	if (_sglMode != 0 && !_innerFunc)return;

	for (j = 0; j < 13; j++)
		for (k = 7; k >= 0; k--)
			if (letters[ch.charCodeAt()][j] & (1<<k)){
				putPixel(x + 7 - k, y + 16 - j);
			}
}
function getImage(left, top, right, bottom) {
	var deltaX, deltaY;
	var buf, bitmap = {};

	if (_sglMode != 0 && !_innerFunc)return null;

	if (_activePage == 0) buf = Screen.buffer1;
	else buf = Screen.buffer2;

	if (right < left){
		var tmp;
		tmp = left;
		left = right;
		right = tmp;
	}
	if (bottom < top){
		var tmp;
		tmp = bottom;
		bottom = top;
		top = tmp;
	}

	if (right >= buf.width)right = buf.width - 1;
	if (left < 0)left = 0;
	if (bottom >= buf.height)bottom = buf.height - 1;
	if (top < 0)top = 0;

	deltaX = right - left + 1;
	deltaY = bottom - top + 1;

	bitmap.width = deltaX;
	bitmap.height = deltaY;
	bitmap.data = new Array(bitmap.width * bitmap.height * 4);

	
	for (var i = 0; i < deltaY; i++) {
		for(var j = 0; j < deltaX * 4; j+=4){
			bitmap.data[bitmap.width * i * 4 + j] = buf.data[(buf.width * (i + top) + left) * 4 + j];
			bitmap.data[bitmap.width * i * 4 + j + 1] = buf.data[(buf.width * (i + top) + left) * 4 + j + 1];
			bitmap.data[bitmap.width * i * 4 + j + 2] = buf.data[(buf.width * (i + top) + left) * 4 + j + 2];
			bitmap.data[bitmap.width * i * 4 + j + 3] = 255;
		}
	}

	return bitmap;
}
function putImage(left, top, bitmap, op) {
	var x1, x2, y1, y2;
	var buf;

	if (_sglMode != 0 && !_innerFunc)return null;

	if (_activePage == 0) buf = Screen.buffer1;
	else buf = Screen.buffer2;

	if (left >= buf.width || top >= buf.height)return null;
	if (left + bitmap.width <= 0 || top + bitmap.height <= 0)return null;

	if (left < 0)x1 = 0;
	else x1 = left;
	if (top < 0)y1 = 0;
	else y1 = top;

	if (left + bitmap.width >= buf.width)x2 = buf.width - 1;
	else x2 = left + bitmap.width - 1;
	if (top + bitmap.height >= buf.height)y2 = buf.height - 1;
	else y2 = top + bitmap.height - 1;

	switch (op) {
	case 0:
		for (var i = 0; i < y2 - y1 + 1; i++) {
			for (var j = 0; j < x2 - x1 + 1; j++) {
				buf.data[(buf.width * (i + top) + left + j) * 4] = bitmap.data[(bitmap.width*i + j) * 4];
				buf.data[(buf.width * (i + top) + left + j) * 4 + 1] = bitmap.data[(bitmap.width*i + j) * 4 + 1];
				buf.data[(buf.width * (i + top) + left + j) * 4 + 2] = bitmap.data[(bitmap.width*i + j) * 4 + 2];
			}
		}
		break;

	case 1:
		for (var i = 0; i < y2 - y1 + 1; i++) {
			for (var j = 0; j < x2 - x1 + 1; j++) {
				buf.data[(buf.width * (i + top) + left + j) * 4] &= bitmap.data[(bitmap.width*i + j) * 4];
				buf.data[(buf.width * (i + top) + left + j) * 4 + 1] &= bitmap.data[(bitmap.width*i + j) * 4 + 1];
				buf.data[(buf.width * (i + top) + left + j) * 4 + 2] &= bitmap.data[(bitmap.width*i + j) * 4 + 2];
			}
		}
		break;

	case 2:
		for (var i = 0; i < y2 - y1 + 1; i++) {
			for (var j = 0; j < x2 - x1 + 1; j++) {
				buf.data[(buf.width * (i + top) + left + j) * 4] |= bitmap.data[(bitmap.width*i + j) * 4];
				buf.data[(buf.width * (i + top) + left + j) * 4 + 1] |= bitmap.data[(bitmap.width*i + j) * 4 + 1];
				buf.data[(buf.width * (i + top) + left + j) * 4 + 2] |= bitmap.data[(bitmap.width*i + j) * 4 + 2];
			}
		}
		break;

	case 3:
		for (var i = 0; i < y2 - y1 + 1; i++) {
			for (var j = 0; j < x2 - x1 + 1; j++) {
				buf.data[(buf.width * (i + top) + left + j) * 4] ^= bitmap.data[(bitmap.width*i + j) * 4];
				buf.data[(buf.width * (i + top) + left + j) * 4 + 1] ^= bitmap.data[(bitmap.width*i + j) * 4 + 1];
				buf.data[(buf.width * (i + top) + left + j) * 4 + 2] ^= bitmap.data[(bitmap.width*i + j) * 4 + 2];
			}
		}
		break;

	case 4:
		for (var i = 0; i < y2 - y1 + 1; i++) {
			for (var j = 0; j < x2 - x1 + 1; j++) {
				buf.data[(buf.width * (i + top) + left + j) * 4] = ~bitmap.data[(bitmap.width*i + j) * 4];
				buf.data[(buf.width * (i + top) + left + j) * 4 + 1] = ~bitmap.data[(bitmap.width*i + j) * 4 + 1];
				buf.data[(buf.width * (i + top) + left + j) * 4 + 2] = ~bitmap.data[(bitmap.width*i + j) * 4 + 2];
			}
		}
		break;
	}
}
function floodFill(x, y, c) {
	var Q = new Array(65535);
	var tmp = {};
	var front = -1, rear = 0, p;
	var buf;

	if (_sglMode != 0 && !_innerFunc)return;

	function enque(x){
		front++;
		Q[(front) % 65535] = {};
		Q[(front) % 65535].x = x.x;
		Q[(front) % 65535].y = x.y;
	}
	function deque(){
		return Q[(rear++) % 65535];
	}
	function empty(){
		return (front+1) % 65535 == (rear % 65535);
	}

	if (_activePage == 0) buf = Screen.buffer1;
	else buf = Screen.buffer2;

	tmp.x = x;
	tmp.y = y;
	enque(tmp);

	while (!empty()) {
		tmp = deque();
		p = (tmp.y*buf.width + tmp.x) * 4;
		if ((buf.data[p] == c.b&&buf.data[p + 1] == c.g&&buf.data[p + 2] == c.r) || (buf.data[p] == Screen.rgb[0] && buf.data[p + 1] == Screen.rgb[1] && buf.data[p + 2] == Screen.rgb[2]))continue;
		if (tmp.x < 0 || tmp.x >= buf.width)continue;
		if (tmp.y < 0 || tmp.y >= buf.height)continue;
		putPixel(tmp.x, tmp.y);
		tmp.x--;
		enque(tmp);
		tmp.x += 2;
		enque(tmp);
		tmp.x--;
		tmp.y++;
		enque(tmp);
		tmp.y -= 2;
		enque(tmp);
	}
}
function putLine(x1, y1, x2, y2, mode) {
	var dx, dy, ux, uy, x, y, eps;

	if (_sglMode != 0 && !_innerFunc)return;

	function abs(x){
		return x > 0 ? x : -x;
	}

	dx = x2 - x1;
	dy = y2 - y1;

	ux = ((dx > 0) << 1) - 1;
	uy = ((dy > 0) << 1) - 1;

	x = x1;
	y = y1;

	eps = 0;
	dx = abs(dx);
	dy = abs(dy);

	if (dx > dy) {
		for (x = x1; x != x2 + ux; x += ux) {
			putPixel(x, y);
			eps += dy;
			if ((eps << 1) >= dx) {
				y += uy;
				eps -= dx;
			}
		}
	}
	else {
		for (y = y1; y != y2 + uy; y += uy) {
			putPixel(x, y);
			eps += dx;
			if ((eps << 1) >= dy) {
				x += ux;
				eps -= dy;
			}
		}
	}
}
function putCircle(xc, yc, r, mode) {
	var x, y, yi, d;

	if (_sglMode != 0 && !_innerFunc)return;

	x = 0;
	y = r;
	d = 3 - 2 * r;

	if (mode == 0) {
		while (x <= y) {
			for (yi = x; yi <= y; yi++) {
				putPixel(xc + x, yc + yi);
				putPixel(xc + x, yc - yi);
				putPixel(xc - x, yc - yi);
				putPixel(xc - x, yc + yi);
				putPixel(xc + yi, yc + x);
				putPixel(xc + yi, yc - x);
				putPixel(xc - yi, yc - x);
				putPixel(xc - yi, yc + x);
			}

			if (d < 0)d = d + 4 * x + 6;
			else {
				d = d + 4 * (x - y) + 10;
				y--;
			}
			x++;
		}
	}
	if (mode == 1) {
		while (x <= y) {
			putPixel(xc + x, yc + y);
			putPixel(xc + x, yc - y);
			putPixel(xc - x, yc - y);
			putPixel(xc - x, yc + y);
			putPixel(xc + y, yc + x);
			putPixel(xc + y, yc - x);
			putPixel(xc - y, yc - x);
			putPixel(xc - y, yc + x);

			if (d < 0)d = d + 4 * x + 6;
			else {
				d = d + 4 * (x - y) + 10;
				y--;
			}
			x++;
		}
	}
}
function putEllipse(xc, yc, a, b, mode) {
	var sqa, sqb, x, y, d, P_x, xi;

	if (_sglMode != 0 && !_innerFunc)return;

	sqa = a * a;
	sqb = b * b;
	x = 0;
	y = b;
	d = 2 * sqb - 2 * b * sqa + sqa;
	P_x = sqa / Math.sqrt(sqa + sqb);

	putPixel(xc + x, yc + y);
	putPixel(xc - x, yc - y);

	if (mode == 0) {
		while (x <= P_x) {
			if (d < 0) d += 2 * sqb * (2 * x + 3);
			else {
				d += 2 * sqb * (2 * x + 3) - 4 * sqa * (y - 1);
				y--;
			}
			x++;

			for (xi = 0; xi <= x; xi++) {
				putPixel(xc + xi, yc + y);
				putPixel(xc - xi, yc + y);
				putPixel(xc + xi, yc - y);
				putPixel(xc - xi, yc - y);
			}
		}
		d = sqb * (x * x + x) + sqa * (y * y - y) - sqa * sqb;
		while (y >= 0) {
			for (xi = 0; xi <= x; xi++) {
				putPixel(xc + xi, yc + y);
				putPixel(xc - xi, yc + y);
				putPixel(xc + xi, yc - y);
				putPixel(xc - xi, yc - y);
			}
			y--;

			if (d < 0) {
				x++;
				d = d - 2 * sqa * y - sqa + 2 * sqb * x + 2 * sqb;
			}
			else d = d - 2 * sqa * y - sqa;
		}
	}
	if (mode == 1) {
		while (x <= P_x) {
			if (d < 0) d += 2 * sqb * (2 * x + 3);
			else {
				d += 2 * sqb * (2 * x + 3) - 4 * sqa * (y - 1);
				y--;
			}
			x++;
			putPixel(xc + x, yc + y);
			putPixel(xc - x, yc + y);
			putPixel(xc + x, yc - y);
			putPixel(xc - x, yc - y);
		}
		d = sqb * (x * x + x) + sqa * (y * y - y) - sqa * sqb;
		while (y >= 0) {
			putPixel(xc + x, yc + y);
			putPixel(xc - x, yc + y);
			putPixel(xc + x, yc - y);
			putPixel(xc - x, yc - y);
			y--;
			if (d < 0) {
				x++;
				d = d - 2 * sqa * y - sqa + 2 * sqb * x + 2 * sqb;
			}
			else d = d - 2 * sqa * y - sqa;
		}
	}
}
function putNumber(n, x, y, lr) {
	var s = new Array(20), sn = 0;

	if (_sglMode != 0 && !_innerFunc)return;

	if (lr == 'l') {
		while (n > 0) {
			s[sn++] = n % 10;
			n = Math.floor(n / 10);
		}

		while (sn > 0) {
			putChar(String.fromCharCode(Math.round(s[--sn] + '0'.charCodeAt())), x, y);
			x += 8;
		}
	}
	else if (lr == 'r') {
		while (n > 0) {
			x -= 8;
			putChar(String.fromCharCode(Math.round(n % 10 + '0'.charCodeAt())), x, y);
			n = Math.floor(n / 10);
		}
	}
}

